EOL = _{("\n" | EOI)}
WHITESPACE = _{ " " | "\t" | "\r" }
COMMENT = _{ ("//"|"#") ~ (!"\n" ~ ANY)* ~ EOL }

primitive_task         =  { EOL? ~ "primitive_task" ~ STRING ~ "{" ~ EOL? ~ (COMMENT | operator_statement | effects_statement | expected_effects_statement | preconditions_statement)* ~ "}" ~ EOL }
compound_task          =  { EOL? ~ "compound_task" ~ STRING ~ "{" ~ EOL? ~ (method ~ EOL?)* ~ "}" ~ EOL }
method                 =  { 
    EOL? ~ "method" ~ (STRING)? ~ "{" ~ EOL? ~ 
    (COMMENT | preconditions_statement | subtasks_statement)* ~ 
    "}" ~ EOL? 
}
subtasks_statement     =  { 
    "subtasks:" ~ "[" ~ EOL? ~ 
    COMMENT? ~
    (identifier ~ ("," ~ EOL? ~ identifier)* ~ ","? ~ EOL? ~ COMMENT?)? ~ 
    "]" ~ EOL 
}

operator_statement =  { "operator:" ~ operator_def ~ EOL  }
operator_def       =  { identifier ~ ("(" ~ operator_param* ~ ")")? }
operator_param     = @{ identifier }


condition  = { identifier ~ operator ~ (value | enum_value) }
operator   = { ">=" | ">" | "<=" | "<" | "==" }
effect     = { set_effect | inc_effect | dec_effect }
// greedy parser, so check for enum_value first otherwise identifier is found before the ::
set_effect = { identifier ~ "=" ~ (value | enum_value | identifier) }
inc_effect = { identifier ~ "+=" ~ value }
dec_effect = { identifier ~ "-=" ~ value }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }
enum_value = @{ identifier ~ "::" ~ identifier }
value      = @{ ("true" | "false") | "-"? ~ ASCII_DIGIT+ }
STRING     = @{ "\"" ~ ((!"\"" ~ ANY))* ~ "\"" }

preconditions_statement = { 
    "preconditions:" ~ "[" ~ EOL? ~
    (condition ~ ("," ~ EOL? ~ condition)* ~ ","? ~ EOL?)? ~
    "]" ~ EOL 
}

effects_statement = { 
    "effects:" ~ "[" ~ EOL? ~
    COMMENT? ~
    (effect ~ ("," ~ EOL? ~ effect)* ~ ","? ~ EOL?)? ~
    "]" ~ EOL 
}

expected_effects_statement = { 
    "expected_effects:" ~ "[" ~ EOL? ~
    COMMENT? ~
    (effect ~ ("," ~ EOL? ~ effect)* ~ ","? ~ EOL?)? ~
    "]" ~ EOL 
}

htn = { SOI ~ WHITESPACE* ~ (primitive_task | compound_task)+ ~ WHITESPACE* ~ EOI }

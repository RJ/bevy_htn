schema {
    version: 0.1.0
}

compound_task "BeTrunkThumper" {
    method "Enemy in sight, attack!" {
        preconditions: [can_see_enemy == true]
        subtasks: [AttackEnemy]
    }
    method "Try to find a recently seen enemy" {
        preconditions: [has_seen_enemy_recently == true]
        subtasks: [
            NavigateToLastEnemyLoc,
            RegainLOSRoar,
            CatchBreath,
        ]
    }
    method "Check bridge, no enemy available" {
        subtasks: [
            ChooseBridgeToCheck,
            NavigateToBridge,
            CheckBridge,
        ]
    }
}

compound_task "AttackEnemy" {
    method "TrunkSlammin time" {
        preconditions: [trunk_health > 0]
        subtasks: [
            NavigateToEnemy,
            DoTrunkSlam
        ]
    }
    method "Trunk depleted.." {
        subtasks: [
            FindTrunk,
            NavigateToTrunk,
            UprootTrunk,
            // by this point we probably can't see the enemy, so this next node will plan tasks
            // that will not be satisfied at execution time.
            // we could set the expected effect of navigating to trunk that can_see_enemy = false?
            // or pause execution of plan here instead of recursing?
            AttackEnemy,
        ]
    }
}
primitive_task "CatchBreath" {
    operator: WaitOperator
}

primitive_task "DoTrunkSlam" {
    preconditions: [
        within_melee_range == true,
        trunk_health > 0,
    ]
    operator: DoTrunkSlamOperator
    effects: [trunk_health -= 1]
}

primitive_task "UprootTrunk" {
    preconditions: [
        within_trunk_pickup_range == true
    ]
    operator: UprootTrunkOperator
    effects: [
        trunk_health = 3,
        found_trunk = false,
        within_trunk_pickup_range = false,
    ]
}

primitive_task "FindTrunk" {
    operator: FindTrunkOperator
    effects: [found_trunk = true]
}

primitive_task "NavigateToTrunk" {
    operator: NavigateToOperator(found_trunk_location)
    effects: [within_trunk_pickup_range = true]
}

primitive_task "NavigateToEnemy" {
    operator: NavigateToOperator(last_enemy_location)
    expected_effects: [within_melee_range = true]
}

primitive_task "NavigateToLastEnemyLoc" {
    operator: NavigateToOperator(last_enemy_location)
    effects: [location = last_enemy_location]
    expected_effects: [
        can_see_enemy = true,
        within_melee_range = true,
    ]
}

primitive_task "RegainLOSRoar" {
    preconditions: [can_see_enemy == true]
    operator: RegainLOSOperator
}

primitive_task "ChooseBridgeToCheck" {
    operator: ChooseBridgeToCheckOperator
}

primitive_task "NavigateToBridge" {
    operator: NavigateToOperator(bridge_to_check)
}

primitive_task "CheckBridge" {
    operator: CheckBridgeOperator
}